# reference pipeline: https://docs.vmware.com/en/Platform-Automation-Toolkit-for-VMware-Tanzu/5.2/vmware-automation-toolkit/GUID-docs-pipelines-multiple-products.html

groups:
- jobs:
    - test-platform-automation
    - install-opsman
    - export-installation
    - upgrade-opsman
    # - expiring-certificates
    - delete-installation
    - download-upload-and-stage-healthwatch-pas-exporter
    - download-upload-and-stage-healthwatch
    - download-upload-and-stage-tas
    - download-upload-and-stage-isolation-segment
    - download-upload-and-stage-pks
    - configure-healthwatch-pas-exporter
    - configure-healthwatch
    - configure-tas
    - configure-ncp
    - configure-isolation-segment
    - configure-pks
    - apply-product-changes
    # - collect-telemetry
    # - stage-configure-apply-telemetry
  name: deploy-foundation
# - jobs:
#     - create-root-ca
#     - apply-new-ca
#     - activate-new-ca-and-regenerate-certs
#     - apply-certificates
#     - cleanup-ca-certificate-authorities
#   name: certificate-rotation

resource_types:
- name: s3
  type: docker-image
  source:
    repository: concourse/s3-resource
    tag: 1.2.1-ubuntu

resources:
- name: platform-automation-tasks
  type: git
  source:
    private_key: ((pipeline-git-repo-key.private_key))
    uri: ((pipeline-git-repo-uri))
    branch: main
    depth: 1

- name: platform-automation-image
  type: s3
  source:
    endpoint: ((s3_endpoint))
    disable_ssl: true
    access_key_id: ((s3_access_key_id))
    secret_access_key: ((s3_secret_access_key))
    bucket: ((s3_pivnet_products_bucket))
    regexp: platform-automation-image-(.*).tgz

# - name: telemetry-collector-binary
#   type: s3
#   source:
#     endpoint: ((s3_endpoint))
#     disable_ssl: true
#     access_key_id: ((s3_access_key_id))
#     secret_access_key: ((s3_secret_access_key))
#     bucket: ((s3_pivnet_products_bucket))
#     regexp: .*telemetry-(.*).tgz

- name: installation
  type: s3
  source:
    endpoint: ((s3_endpoint))
    disable_ssl: true
    access_key_id: ((s3_access_key_id))
    secret_access_key: ((s3_secret_access_key))
    bucket: ((s3_installation_bucket))
    regexp: ((foundation))-installation-(.*).zip

# VM state and foundation configuration
- name: state
  type: s3
  source:
    endpoint: ((s3_endpoint))
    disable_ssl: true
    access_key_id: ((s3_access_key_id))
    secret_access_key: ((s3_secret_access_key))
    bucket: ((s3_foundation_state_bucket))
    versioned_file: state-((foundation)).yml
    initial_content_text: '{}'
    initial_version: 'empty-start'

# configurations
- name: configuration
  type: git
  source:
    private_key: ((pipeline-git-repo-key.private_key))
    uri: ((pipeline-git-repo-uri))
    branch: main
    depth: 1

- name: custom-tasks
  type: git
  source:
    private_key: ((pipeline-git-repo-key.private_key))
    uri: ((pipeline-git-repo-uri))
    branch: main
    depth: 1

# triggers used to have jobs do something in a timely manner
- name: one-time-trigger
  type: time
  source:
    interval: 999999h

prepare-tasks-with-secrets: &prepare-tasks-with-secrets
  image: platform-automation-image
  file: platform-automation-tasks/tasks/prepare-tasks-with-secrets.yml
  input_mapping:
    tasks: platform-automation-tasks
    config: configuration
    vars: configuration
  params:
    CONFIG_PATHS: config/foundations/config config/foundations/((foundation))/config
    VARS_PATHS: vars/foundations/((foundation))/vars
  output_mapping:
    tasks: platform-automation-tasks

jobs:
- name: test-platform-automation
  serial: true
  plan:
    - in_parallel:
      - get: platform-automation-image
        params:
          unpack: true
      - get: platform-automation-tasks
      - get: configuration
    # code_snippet test-interpolate-usage start yaml
    - task: test-interpolate
      image: platform-automation-image
      file: platform-automation-tasks/tasks/test-interpolate.yml
      params:
        CONFIG_FILE: foundations/((foundation))/config/download-tas.yml
        SKIP_MISSING: true
      input_mapping:
        config: configuration
    # code_snippet test-interpolate-usage end
    # code_snippet test-usage start yaml
    - task: test
      file: platform-automation-tasks/tasks/test.yml
      image: platform-automation-image
  # code_snippet test-usage end

- name: install-opsman
  serial: true
  serial_groups: [ install ]
  plan:
  - in_parallel:
    - get: platform-automation-image
      params:
        unpack: true
    - get: one-time-trigger
      trigger: true
    - get: platform-automation-tasks
    - get: configuration
    - get: state
  - task: prepare-tasks-with-secrets
    <<: *prepare-tasks-with-secrets
  - task: download-opsman-image
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    input_mapping:
      config: configuration
      vars: configuration
    params:
      CONFIG_FILE: foundations/((foundation))/config/download-opsman.yml
      VARS_FILES: vars/foundations/((foundation))/vars/versions.yml
      SOURCE: pivnet
    output_mapping:
      downloaded-product: opsman-image
  # code_snippet create-vm-usage start yaml
  - task: create-vm
    image: platform-automation-image
    file: platform-automation-tasks/tasks/create-vm.yml
    input_mapping:
      image: opsman-image
      config: configuration
      vars: configuration
    params:
      OPSMAN_CONFIG_FILE: foundations/((foundation))/config/opsman.yml
      STATE_FILE: state-((foundation)).yml
      VARS_FILES: vars/foundations/((foundation))/vars/director.yml
    ensure: &put-state
      do:
      - put: state
        params:
          file: generated-state/state-((foundation)).yml
  # code_snippet create-vm-usage end
  # code_snippet configure-authentication-usage start yaml
  - task: configure-authentication
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-authentication.yml
    attempts: 10
    input_mapping:
      env: configuration
      config: configuration
    params:
      ENV_FILE: foundations/config/env.yml
      AUTH_CONFIG_FILE: foundations/config/auth.yml
  # code_snippet configure-authentication-usage end
  # code_snippet configure-opsman-usage start yaml
  - task: configure-opsman
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-opsman.yml
    input_mapping:
      env: configuration
      config: configuration
      vars: configuration
    params:
      ENV_FILE: foundations/config/env.yml
      OPSMAN_CONFIG_FILE: foundations/((foundation))/config/opsman.yml
      VARS_FILES: vars/foundations/((foundation))/vars/director.yml
  # code_snippet configure-opsman-usage end
  # code_snippet configure-director-usage start yaml
  - task: configure-director
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-director.yml
    input_mapping:
      config: configuration
      env: configuration
      vars: configuration
    params:
      ENV_FILE: foundations/config/env.yml
      DIRECTOR_CONFIG_FILE: foundations/((foundation))/config/director.yml
      # TODO: needed in VARS_FILES??? => vars/foundations/((foundation))/vars/tas.yml
      VARS_FILES: |
        vars/foundations/((foundation))/vars/director.yml
  # code_snippet configure-director-usage end
  # code_snippet apply-director-changes-usage start yaml
  - task: apply-director-changes
    image: platform-automation-image
    attempts: 3
    file: platform-automation-tasks/tasks/apply-director-changes.yml
    input_mapping:
      env: configuration
    params:
      ENV_FILE: foundations/config/env.yml
  # code_snippet apply-director-changes-usage end
  # TODO: Do I need this at all? It's also done in the next job? https://chat.google.com/room/AAAAzqe3vEo/3xkeBPRfb9w/ihhT8NKgGSs?cls=10
  # - task: export-installation
  #   image: platform-automation-image
  #   file: platform-automation-tasks/tasks/export-installation.yml
  #   input_mapping:
  #     env: configuration
  #   params:
  #     INSTALLATION_FILE: ((foundation))-installation-$timestamp.zip
  #     ENV_FILE: foundations/config/env.yml
  # - put: installation
  #   params:
  #     file: installation/((foundation))-installation*.zip

- name: export-installation
  serial_groups: [ install ]
  serial: true
  plan:
  - in_parallel:
    - get: state
      passed: [ install-opsman ]
      trigger: true
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
    - get: configuration
  - task: prepare-tasks-with-secrets
    <<: *prepare-tasks-with-secrets
  # code_snippet revert-staged-changes-usage start yaml
  - task: revert-staged-changes
    image: platform-automation-image
    file: platform-automation-tasks/tasks/revert-staged-changes.yml
    input_mapping:
      env: configuration
    params:
      ENV_FILE: foundations/config/env.yml
  # code_snippet revert-staged-changes-usage end
  - do: &export-installation
    - task: export-installation
      image: platform-automation-image
      file: platform-automation-tasks/tasks/export-installation.yml
      input_mapping:
        env: configuration
      params:
        ENV_FILE: foundations/config/env.yml
        INSTALLATION_FILE: ((foundation))-installation-$timestamp.zip
    - put: installation
      params:
        file: installation/((foundation))-installation*.zip

- name: upgrade-opsman
  serial: true
  serial_groups: [ install ]
  plan:
  - in_parallel:
    - get: platform-automation-image
      params:
        unpack: true
      # TODO: why a trigger here? it makes more sense to have it on the configuration resource
      # as this holds the version, no?
      trigger: true
    - get: platform-automation-tasks
    - get: installation
      passed: [ export-installation ]
    - get: configuration
    - get: state
  - task: prepare-tasks-with-secrets
    <<: *prepare-tasks-with-secrets
  - task: download-opsman-image
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    input_mapping:
      config: configuration
      vars: configuration
    params:
      CONFIG_FILE: foundations/((foundation))/config/download-opsman.yml
      VARS_FILES: vars/foundations/((foundation))/vars/versions.yml
      SOURCE: pivnet
    output_mapping:
      downloaded-product: opsman-image
  # code_snippet upgrade-opsman-usage start yaml
  - task: upgrade-opsman
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upgrade-opsman.yml
    input_mapping:
      image: opsman-image
      config: configuration
      env: configuration
      vars: configuration
    params:
      ENV_FILE: foundations/config/env.yml
      OPSMAN_CONFIG_FILE: foundations/((foundation))/config/opsman.yml
      STATE_FILE: state-((foundation)).yml
      INSTALLATION_FILE: ((foundation))-installation*.zip
      VARS_FILES: vars/foundations/((foundation))/vars/director.yml
    ensure: *put-state
  # code_snippet upgrade-opsman-usage end
  - task: configure-director
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-director.yml
    input_mapping:
      config: configuration
      env: configuration
      vars: configuration
    params:
      ENV_FILE: foundations/config/env.yml
      DIRECTOR_CONFIG_FILE: foundations/((foundation))/config/director.yml
      VARS_FILES: |
        vars/foundations/((foundation))/vars/director.yml
        vars/foundations/((foundation))/vars/tas.yml
  - task: apply-director-changes
    image: platform-automation-image
    file: platform-automation-tasks/tasks/apply-director-changes.yml
    attempts: 3
    input_mapping:
      env: configuration
    params:
      ENV_FILE: foundations/config/env.yml
  - do: *export-installation

- name: download-upload-and-stage-tas
  serial: true
  serial_groups: [ products ]
  plan:
  - in_parallel:
    - get: platform-automation-image
      params:
        unpack: true
      trigger: true
      passed: [ "upgrade-opsman" ]
    - get: platform-automation-tasks
    - get: configuration
  - task: prepare-tasks-with-secrets
    <<: *prepare-tasks-with-secrets
  - task: download-tas
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    input_mapping:
      config: configuration
      vars: configuration
    params:
      CONFIG_FILE: foundations/((foundation))/config/download-tas.yml
      VARS_FILES: vars/foundations/((foundation))/vars/versions.yml
      SOURCE: pivnet
    output_mapping:
      downloaded-product: tas-product
      downloaded-stemcell: tas-stemcell
  - task: download-ncp
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    input_mapping:
      config: configuration
      vars: configuration
    params:
      CONFIG_FILE: foundations/((foundation))/config/download-ncp.yml
      VARS_FILES: vars/foundations/((foundation))/vars/versions.yml
      SOURCE: pivnet
    output_mapping:
      downloaded-product: ncp-product
  - task: upload-tas-product
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-product.yml
    input_mapping:
      product: tas-product
      env: configuration
    params:
      ENV_FILE: foundations/config/env.yml
  - task: upload-ncp-product
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-product.yml
    input_mapping:
      product: ncp-product
      env: configuration
    params:
      ENV_FILE: foundations/config/env.yml
  - task: upload-tas-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-stemcell.yml
    input_mapping:
      env: configuration
      stemcell: tas-stemcell
    params:
      ENV_FILE: foundations/config/env.yml
  - task: stage-tas
    image: platform-automation-image
    file: platform-automation-tasks/tasks/stage-product.yml
    input_mapping:
      product: tas-product
      env: configuration
    params:
      ENV_FILE: foundations/config/env.yml
  - task: stage-ncp
    image: platform-automation-image
    file: platform-automation-tasks/tasks/stage-product.yml
    input_mapping:
      product: ncp-product
      env: configuration
    params:
      ENV_FILE: foundations/config/env.yml

- name: download-upload-and-stage-isolation-segment
  serial: true
  serial_groups: [ products ]
  plan:
  - in_parallel:
    - get: platform-automation-image
      params:
        unpack: true
      trigger: true
      passed: [ "upgrade-opsman" ]
    - get: platform-automation-tasks
    - get: configuration
  - task: prepare-tasks-with-secrets
    <<: *prepare-tasks-with-secrets
  - task: download-isolation-segment
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    input_mapping:
      config: configuration
      vars: configuration
    params:
      CONFIG_FILE: foundations/((foundation))/config/download-isolation-segment.yml
      VARS_FILES: vars/foundations/((foundation))/vars/versions.yml
      SOURCE: pivnet
    output_mapping:
      downloaded-product: isolation-segment
  - task: upload-isolation-segment
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-product.yml
    input_mapping:
      product: isolation-segment
      env: configuration
    params:
      ENV_FILE: foundations/config/env.yml
  - task: stage-isolation-segment
    image: platform-automation-image
    file: platform-automation-tasks/tasks/stage-product.yml
    input_mapping:
      product: isolation-segment
      env: configuration
    params:
      ENV_FILE: foundations/config/env.yml

- name: download-upload-and-stage-pks
  serial: true
  serial_groups: [ products ]
  plan:
  - in_parallel:
    - get: platform-automation-image
      params:
        unpack: true
      trigger: true
      passed: [ "upgrade-opsman" ]
    - get: platform-automation-tasks
    - get: configuration
  - task: prepare-tasks-with-secrets
    <<: *prepare-tasks-with-secrets
  - task: download-pks
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    input_mapping:
      config: configuration
      vars: configuration
    params:
      CONFIG_FILE: foundations/((foundation))/config/download-pks.yml
      VARS_FILES: vars/foundations/((foundation))/vars/versions.yml
      SOURCE: pivnet
    output_mapping:
      downloaded-product: pks-product
      downloaded-stemcell: pks-stemcell
  - task: upload-pks-product
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-product.yml
    input_mapping:
      product: pks-product
      env: configuration
    params:
      ENV_FILE: foundations/config/env.yml
  - task: upload-pks-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-stemcell.yml
    input_mapping:
      env: configuration
      stemcell: pks-stemcell
    params:
      ENV_FILE: foundations/config/env.yml
  - task: stage-pks
    image: platform-automation-image
    file: platform-automation-tasks/tasks/stage-product.yml
    input_mapping:
      product: pks-product
      env: configuration
    params:
      ENV_FILE: foundations/config/env.yml

- name: download-upload-and-stage-healthwatch
  serial: true
  serial_groups: [ products ]
  plan:
    - in_parallel:
        - get: platform-automation-image
          params:
            unpack: true
          trigger: true
          passed: [ "upgrade-opsman" ]
        - get: platform-automation-tasks
        - get: configuration
    - task: prepare-tasks-with-secrets
      <<: *prepare-tasks-with-secrets
    - task: download-healthwatch
      image: platform-automation-image
      file: platform-automation-tasks/tasks/download-product.yml
      input_mapping:
        config: configuration
        vars: configuration
      params:
        CONFIG_FILE: foundations/((foundation))/config/download-healthwatch.yml
        VARS_FILES: vars/foundations/((foundation))/vars/versions.yml
        SOURCE: pivnet
      output_mapping:
        downloaded-product: healthwatch-product
        downloaded-stemcell: healthwatch-stemcell
    - task: upload-and-stage-healthwatch
      image: platform-automation-image
      file: platform-automation-tasks/tasks/upload-and-stage-product.yml
      input_mapping:
        product: healthwatch-product
        env: configuration
      params:
        ENV_FILE: foundations/config/env.yml
    - task: upload-healthwatch-stemcell
      image: platform-automation-image
      file: platform-automation-tasks/tasks/upload-stemcell.yml
      input_mapping:
        env: configuration
        stemcell: healthwatch-stemcell
      params:
        ENV_FILE: foundations/config/env.yml

- name: download-upload-and-stage-healthwatch-pas-exporter
  serial: true
  serial_groups: [ products ]
  plan:
    - in_parallel:
        - get: platform-automation-image
          params:
            unpack: true
          trigger: true
          passed: [ "upgrade-opsman" ]
        - get: platform-automation-tasks
        - get: configuration
    - task: prepare-tasks-with-secrets
      <<: *prepare-tasks-with-secrets
    - task: download-healthwatch
      image: platform-automation-image
      file: platform-automation-tasks/tasks/download-product.yml
      input_mapping:
        config: configuration
        vars: configuration
      params:
        CONFIG_FILE: foundations/((foundation))/config/download-healthwatch-pas-exporter.yml
        VARS_FILES: vars/foundations/((foundation))/vars/versions.yml
        SOURCE: pivnet
      output_mapping:
        downloaded-product: healthwatch-pas-exporter
    - task: upload-and-stage-healthwatch-pas-exporter
      image: platform-automation-image
      file: platform-automation-tasks/tasks/upload-and-stage-product.yml
      input_mapping:
        product: healthwatch-pas-exporter
        env: configuration
      params:
        ENV_FILE: foundations/config/env.yml

- name: configure-tas
  serial: true
  serial_groups: [ install ]
  plan:
    - in_parallel:
      - get: platform-automation-image
        params:
          unpack: true
        passed:
          - download-upload-and-stage-tas
        trigger: true
      - get: platform-automation-tasks
      - get: configuration
      - get: custom-tasks
    - task: prepare-tasks-with-secrets
      <<: *prepare-tasks-with-secrets
    - task: generate-certificate-for-gorouter
      image: platform-automation-image
      file: platform-automation-tasks/tasks/generate-certificate.yml
      input_mapping:
        env: configuration
      params:
        DOMAINS: ((tas_ssl_domains))
        ENV_FILE: foundations/config/env.yml
      output_mapping:
        certificate: gorouter-certificate
    - task: interpolate-runtime-vars
      image: platform-automation-image
      file: custom-tasks/custom-tasks/interpolate-runtime-vars-from-files.yml
      input_mapping:
        config: configuration
        files: gorouter-certificate
      params:
        CONFIG_PATH: config/foundations/((foundation))/vars/runtime-vars-tmpl.yml
        VAR_FILEPATH_MAPPING: tas_gorouter_ssl_cert:certificate.pem tas_gorouter_ssl_key:certificate.key
      output_mapping:
        interpolated-files: gorouter-ssl-cert-vars
    - task: configure-tas
      image: platform-automation-image
      file: platform-automation-tasks/tasks/configure-product.yml
      input_mapping:
        config: configuration
        env: configuration
        vars: configuration
      params:
        CONFIG_FILE: foundations/((foundation))/config/tas.yml
        ENV_FILE: foundations/config/env.yml
        VARS_FILES: |
          vars/foundations/((foundation))/vars/tas.yml
          vars/foundations/((foundation))/vars/director.yml
          gorouter-ssl-cert-vars/runtime-vars.yml

- name: configure-ncp
  serial: true
  serial_groups: [ install ]
  plan:
    - in_parallel:
      - get: platform-automation-image
        params:
          unpack: true
        passed:
          - download-upload-and-stage-tas
        trigger: true
      - get: platform-automation-tasks
      - get: configuration
    - task: prepare-tasks-with-secrets
      <<: *prepare-tasks-with-secrets
    - task: configure-ncp
      image: platform-automation-image
      file: platform-automation-tasks/tasks/configure-product.yml
      input_mapping:
        config: configuration
        env: configuration
        vars: configuration
      params:
        CONFIG_FILE: foundations/((foundation))/config/ncp.yml
        ENV_FILE: foundations/config/env.yml
        VARS_FILES: |
          vars/foundations/((foundation))/vars/ncp.yml
          vars/foundations/((foundation))/vars/director.yml

- name: configure-isolation-segment
  serial: true
  serial_groups: [ install ]
  plan:
    - in_parallel:
      - get: platform-automation-image
        params:
          unpack: true
        passed:
          - download-upload-and-stage-isolation-segment
        trigger: true
      - get: platform-automation-tasks
      - get: configuration
    - task: prepare-tasks-with-secrets
      <<: *prepare-tasks-with-secrets
    - task: configure-isolation-segment
      image: platform-automation-image
      file: platform-automation-tasks/tasks/configure-product.yml
      input_mapping:
        config: configuration
        env: configuration
        vars: configuration
      params:
        CONFIG_FILE: foundations/((foundation))/config/isolation-segment.yml
        ENV_FILE: foundations/config/env.yml
        VARS_FILES: |
          vars/foundations/((foundation))/vars/isolation-segment.yml
          vars/foundations/((foundation))/vars/director.yml

- name: configure-pks
  serial: true
  serial_groups: [ install ]
  plan:
    - in_parallel:
      - get: platform-automation-image
        params:
          unpack: true
        passed:
          - download-upload-and-stage-tas
        trigger: true
      - get: platform-automation-tasks
      - get: configuration
    - task: prepare-tasks-with-secrets
      <<: *prepare-tasks-with-secrets
    - task: configure-pks
      image: platform-automation-image
      file: platform-automation-tasks/tasks/configure-product.yml
      input_mapping:
        config: configuration
        env: configuration
        vars: configuration
      params:
        CONFIG_FILE: foundations/((foundation))/config/pks.yml
        ENV_FILE: foundations/config/env.yml
        VARS_FILES: |
          vars/foundations/((foundation))/vars/pks.yml
          vars/foundations/((foundation))/vars/director.yml

- name: configure-healthwatch
  serial: true
  serial_groups: [ install ]
  plan:
    - in_parallel:
      - get: platform-automation-image
        params:
          unpack: true
        passed:
          - download-upload-and-stage-healthwatch
        trigger: true
      - get: platform-automation-tasks
      - get: configuration
    - task: prepare-tasks-with-secrets
      <<: *prepare-tasks-with-secrets
    - task: configure-healthwatch
      image: platform-automation-image
      file: platform-automation-tasks/tasks/configure-product.yml
      input_mapping:
        config: configuration
        env: configuration
        vars: configuration
      params:
        CONFIG_FILE: foundations/((foundation))/config/healthwatch.yml
        ENV_FILE: foundations/config/env.yml
        VARS_FILES: |
          vars/foundations/((foundation))/vars/director.yml

- name: configure-healthwatch-pas-exporter
  serial: true
  serial_groups: [ install ]
  plan:
    - in_parallel:
      - get: platform-automation-image
        params:
          unpack: true
        passed:
          - download-upload-and-stage-healthwatch-pas-exporter
        trigger: true
      - get: platform-automation-tasks
      - get: configuration
    - task: prepare-tasks-with-secrets
      <<: *prepare-tasks-with-secrets
    - task: configure-healthwatch
      image: platform-automation-image
      file: platform-automation-tasks/tasks/configure-product.yml
      input_mapping:
        config: configuration
        env: configuration
        vars: configuration
      params:
        CONFIG_FILE: foundations/((foundation))/config/healthwatch-pas-exporter.yml
        ENV_FILE: foundations/config/env.yml
        VARS_FILES: |
          vars/foundations/((foundation))/vars/director.yml

- name: apply-product-changes
  serial: true
  serial_groups: [ install ]
  plan:
  - in_parallel:
    - get: platform-automation-image
      params:
        unpack: true
      passed:
      - configure-tas
      - configure-ncp
      - configure-pks
      - configure-isolation-segment
      # - configure-healthwatch
      # - configure-healthwatch-pas-exporter
      trigger: true
    - get: platform-automation-tasks
    - get: configuration
  - task: prepare-tasks-with-secrets
    <<: *prepare-tasks-with-secrets
  - task: pre-deploy-check
    image: platform-automation-image
    file: platform-automation-tasks/tasks/pre-deploy-check.yml
    input_mapping:
      env: configuration
    params:
      ENV_FILE: foundations/config/env.yml
  - task: apply-product-changes
    attempts: 3
    image: platform-automation-image
    file: platform-automation-tasks/tasks/apply-changes.yml
    input_mapping:
      env: configuration
    params:
      ENV_FILE: foundations/config/env.yml
  - task: check-pending-changes
    image: platform-automation-image
    file: platform-automation-tasks/tasks/check-pending-changes.yml
    input_mapping:
      env: configuration
    params:
      ENV_FILE: foundations/config/env.yml
      ALLOW_PENDING_CHANGES: true
  - task: export-installation
    image: platform-automation-image
    file: platform-automation-tasks/tasks/export-installation.yml
    input_mapping:
      env: configuration
    params:
      ENV_FILE: foundations/config/env.yml
      INSTALLATION_FILE: ((foundation))-installation-$timestamp.zip
  - put: installation
    params:
      file: installation/((foundation))-installation*.zip

# - name: collect-telemetry
#   serial: true
#   serial_groups: [ install ]
#   plan:
#   - in_parallel:
#     - get: telemetry-collector-binary
#       params:
#         unpack: true
#     - get: platform-automation-image
#       params:
#         unpack: true
#       passed:
#       - apply-product-changes
#       trigger: true
#     - get: platform-automation-tasks
#     - get: configuration
#   - task: prepare-tasks-with-secrets
#     <<: *prepare-tasks-with-secrets
#   # code_snippet collect-telemetry-usage start yaml
#   - task: collect-telemetry-data
#     image: platform-automation-image
#     file: platform-automation-tasks/tasks/collect-telemetry.yml
#     input_mapping:
#       env: configuration
#       config: configuration
#     params:
#       CONFIG_FILE: foundations/((foundation))/config/telemetry.yml
#       ENV_FILE: foundations/config/env.yml
#   # code_snippet collect-telemetry-usage end
#   # code_snippet send-telemetry-usage start yaml
#   - task: send-telemetry-data
#     attempts: 3
#     image: platform-automation-image
#     file: platform-automation-tasks/tasks/send-telemetry.yml
#     params:
#       API_KEY: no-op-test-key
#       DATA_FILE_PATH: collected-telemetry-data/FoundationDetails*.tar

# - name: expiring-certificates
#   serial: true
#   serial_groups: [ install ]
#   plan:
#     - in_parallel:
#       - get: platform-automation-image
#         params:
#           unpack: true
#         trigger: true
#       - get: platform-automation-tasks
#       - get: configuration
#       - get: state
#     - task: prepare-tasks-with-secrets
#       <<: *prepare-tasks-with-secrets
#     # code_snippet expiring-certificates-usage start yaml
#     - task: expiring-certificates
#       image: platform-automation-image
#       file: platform-automation-tasks/tasks/expiring-certificates.yml
#       input_mapping:
#         env: configuration
#       params:
#         ENV_FILE: foundations/config/env.yml
#         EXPIRES_WITHIN: 2m
    
# - name: stage-configure-apply-telemetry
#   serial_groups: [install]
#   plan:
#     - in_parallel:
#       - get: platform-automation-image
#         params:
#           unpack: true
#         passed:
#           - apply-product-changes
#         trigger: true
#       - get: platform-automation-tasks
#       - get: configuration
#     - task: prepare-tasks-with-secrets
#       <<: *prepare-tasks-with-secrets
#     # code_snippet stage-configure-apply-usage start yaml
#     - task: stage-configure-apply
#       image: platform-automation-image
#       file: platform-automation-tasks/tasks/stage-configure-apply.yml
#       attempts: 3
#       params:
#         CONFIG_FILE: foundations/((foundation))/config/p-telemetry.yml
#         STAGE_PRODUCT_CONFIG_FILE: foundations/((foundation))/config/p-telemetry.yml
#         ENV_FILE: foundations/config/env.yml
#         VARS_FILES: |
#           vars/foundations/((foundation))/vars/director.yml
#       input_mapping:
#         env: configuration
#         config: configuration
#         vars: configuration
#     # code_snippet stage-configure-apply-usage end

- name: delete-installation
  serial: true
  serial_groups: [install]
  plan:
    - in_parallel:
      - get: platform-automation-image
        params:
          unpack: true
      - get: platform-automation-tasks
      - get: configuration
      - get: state
    - task: prepare-tasks-with-secrets
      <<: *prepare-tasks-with-secrets
    - task: delete-installation
      image: platform-automation-image
      file: platform-automation-tasks/tasks/delete-installation.yml
      input_mapping:
        env: configuration
      params:
        ENV_FILE: foundations/config/env.yml
    - task: delete-vm
      image: platform-automation-image
      file: platform-automation-tasks/tasks/delete-vm.yml
      input_mapping:
        config: configuration
      params:
        OPSMAN_CONFIG_FILE: foundations/((foundation))/config/opsman.yml
        STATE_FILE: state-((foundation)).yml
        VARS_FILES: config/foundations/((foundation))/vars/director.yml
      ensure:
        do:
        - put: state
          params:
            file: generated-state/state-((foundation)).yml

# - name: create-root-ca
#   plan:
#     - in_parallel:
#         - get: platform-automation-image
#           params:
#             unpack: true
#         - get: platform-automation-tasks
#         - get: configuration
#     - task: prepare-tasks-with-secrets
#       <<: *prepare-tasks-with-secrets
#     # code_snippet configure-new-certificate-authority-usage start yaml
#     - task: create-root-ca
#       image: platform-automation-image
#       file: platform-automation-tasks/tasks/configure-new-certificate-authority.yml
#       input_mapping:
#         env: configuration
#       params:
#         ENV_FILE: foundations/config/env.yml
#     # code_snippet configure-new-certificate-authority-usage end

# - name: apply-new-ca
#   serial: true
#   plan:
#     - in_parallel:
#         - get: platform-automation-image
#           params:
#             unpack: true
#           passed:
#             - create-root-ca
#         - get: platform-automation-tasks
#         - get: configuration
#     - task: prepare-tasks-with-secrets
#       <<: *prepare-tasks-with-secrets
#     - task: pre-deploy-check
#       image: platform-automation-image
#       file: platform-automation-tasks/tasks/pre-deploy-check.yml
#       input_mapping:
#         env: configuration
#       params:
#         ENV_FILE: foundations/config/env.yml
#     - task: apply-product-changes
#       attempts: 3
#       image: platform-automation-image
#       file: platform-automation-tasks/tasks/apply-changes.yml
#       input_mapping:
#         env: configuration
#       params:
#         ENV_FILE: foundations/config/env.yml
#         SELECTIVE_DEPLOY_PRODUCTS: "cf,p-bosh,p-healthwatch2,p-healthwatch2-pas-exporter,pivotal-telemetry-om"

# - name: activate-new-ca-and-regenerate-certs
#   serial: true
#   plan:
#     - in_parallel:
#         - get: platform-automation-image
#           params:
#             unpack: true
#           passed:
#             - apply-new-ca
#         - get: platform-automation-tasks
#         - get: configuration
#     - task: prepare-tasks-with-secrets
#       <<: *prepare-tasks-with-secrets
#     # code_snippet activate-certificate-authority-usage start yaml
#     - task: activate-new-ca
#       image: platform-automation-image
#       file: platform-automation-tasks/tasks/activate-certificate-authority.yml
#       input_mapping:
#         env: configuration
#       params:
#         ENV_FILE: foundations/config/env.yml
#     # code_snippet activate-certificate-authority-usage end
#     # code_snippet regenerate-certificates-usage start yaml
#     - task: regenerate-certificates
#       image: platform-automation-image
#       file: platform-automation-tasks/tasks/regenerate-certificates.yml
#       input_mapping:
#         env: configuration
#       params:
#         ENV_FILE: foundations/config/env.yml
#     # code_snippet regenerate-certificates-usage end

# - name: apply-certificates
#   serial: true
#   plan:
#     - in_parallel:
#         - get: platform-automation-image
#           params:
#             unpack: true
#           passed:
#             - activate-new-ca-and-regenerate-certs
#         - get: platform-automation-tasks
#         - get: configuration
#     - task: prepare-tasks-with-secrets
#       <<: *prepare-tasks-with-secrets
#     - task: pre-deploy-check
#       image: platform-automation-image
#       file: platform-automation-tasks/tasks/pre-deploy-check.yml
#       input_mapping:
#         env: configuration
#       params:
#         ENV_FILE: foundations/config/env.yml
#     - task: apply-product-changes
#       attempts: 3
#       image: platform-automation-image
#       file: platform-automation-tasks/tasks/apply-changes.yml
#       input_mapping:
#         env: configuration
#       params:
#         ENV_FILE: foundations/config/env.yml
#         SELECTIVE_DEPLOY_PRODUCTS: "cf,p-bosh,p-healthwatch2,p-healthwatch2-pas-exporter,pivotal-telemetry-om"

# - name: cleanup-ca-certificate-authorities
#   serial: true
#   plan:
#     - in_parallel:
#         - get: platform-automation-image
#           params:
#             unpack: true
#           passed:
#             - apply-certificates
#         - get: platform-automation-tasks
#         - get: configuration
#     - task: prepare-tasks-with-secrets
#       <<: *prepare-tasks-with-secrets
#     # code_snippet delete-certificate-authority-usage start yaml
#     - task: delete-certificate-authority
#       image: platform-automation-image
#       file: platform-automation-tasks/tasks/delete-certificate-authority.yml
#       input_mapping:
#         env: configuration
#       params:
#         ENV_FILE: foundations/config/env.yml
#     # code_snippet delete-certificate-authority-usage end
#     - task: pre-deploy-check
#       image: platform-automation-image
#       file: platform-automation-tasks/tasks/pre-deploy-check.yml
#       input_mapping:
#         env: configuration
#       params:
#         ENV_FILE: foundations/config/env.yml
#     - task: apply-product-changes
#       attempts: 3
#       image: platform-automation-image
#       file: platform-automation-tasks/tasks/apply-changes.yml
#       input_mapping:
#         env: configuration
#       params:
#         ENV_FILE: foundations/config/env.yml
#         SELECTIVE_DEPLOY_PRODUCTS: "cf,p-bosh,p-healthwatch2,p-healthwatch2-pas-exporter,pivotal-telemetry-om"
# # The previous line helps maintain current documentation at http://docs.pivotal.io.
