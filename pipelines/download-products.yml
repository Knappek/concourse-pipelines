# reference pipeline: https://docs.vmware.com/en/Platform-Automation-Toolkit-for-VMware-Tanzu/5.2/vmware-automation-toolkit/GUID-docs-pipelines-multiple-products.html

resource_types:
- name: pivnet
  type: docker-image
  source:
    repository: pivotalcf/pivnet-resource
    tag: latest-final
- name: s3
  type: docker-image
  source:
    repository: concourse/s3-resource
    tag: 1.2.1-ubuntu

resources:
- name: opsman-product
  type: s3
  source:
    endpoint: ((s3_endpoint))
    disable_ssl: true
    access_key_id: ((s3_access_key_id))
    secret_access_key: ((s3_secret_access_key))
    bucket: ((s3_pivnet_products_bucket))
    regexp: \[ops-manager,(.*)\]ops-manager-vsphere.*.ova

- name: pks-product
  type: s3
  source:
    endpoint: ((s3_endpoint))
    disable_ssl: true
    access_key_id: ((s3_access_key_id))
    secret_access_key: ((s3_secret_access_key))
    bucket: ((s3_pivnet_products_bucket))
    regexp: \[pivotal-container-service,(.*)\]pivotal-container-service-.*.pivotal

- name: pks-stemcell
  type: s3
  source:
    endpoint: ((s3_endpoint))
    disable_ssl: true
    access_key_id: ((s3_access_key_id))
    secret_access_key: ((s3_secret_access_key))
    bucket: ((s3_pivnet_products_bucket))
    regexp: pks-stemcell/\[stemcells-ubuntu-jammy,(.*)\]bosh-stemcell-.*-vsphere.*\.tgz

- name: tas-product
  type: s3
  source:
    endpoint: ((s3_endpoint))
    disable_ssl: true
    access_key_id: ((s3_access_key_id))
    secret_access_key: ((s3_secret_access_key))
    bucket: ((s3_pivnet_products_bucket))
    regexp: \[elastic-runtime,(.*)\]cf-.*.pivotal

- name: tas-stemcell
  type: s3
  source:
    endpoint: ((s3_endpoint))
    disable_ssl: true
    access_key_id: ((s3_access_key_id))
    secret_access_key: ((s3_secret_access_key))
    bucket: ((s3_pivnet_products_bucket))
    regexp: tas-stemcell/\[stemcells-ubuntu-jammy,(.*)\]bosh-stemcell-.*-vsphere.*\.tgz

- name: isolation-segment
  type: s3
  source:
    endpoint: ((s3_endpoint))
    disable_ssl: true
    access_key_id: ((s3_access_key_id))
    secret_access_key: ((s3_secret_access_key))
    bucket: ((s3_pivnet_products_bucket))
    regexp: \[p-isolation-segment,(.*)\]p-isolation-segment-.*\.pivotal

- name: ncp-product
  type: s3
  source:
    endpoint: ((s3_endpoint))
    disable_ssl: true
    access_key_id: ((s3_access_key_id))
    secret_access_key: ((s3_secret_access_key))
    bucket: ((s3_pivnet_products_bucket))
    regexp: \[vmware-nsx-t,(.*)\]VMware-NSX-T-.*.pivotal

- name: healthwatch-product
  type: s3
  source:
    endpoint: ((s3_endpoint))
    disable_ssl: true
    access_key_id: ((s3_access_key_id))
    secret_access_key: ((s3_secret_access_key))
    bucket: ((s3_pivnet_products_bucket))
    regexp: \[p-healthwatch,(.*)\]healthwatch-\d.*.pivotal

- name: healthwatch-pas-exporter
  type: s3
  source:
    endpoint: ((s3_endpoint))
    disable_ssl: true
    access_key_id: ((s3_access_key_id))
    secret_access_key: ((s3_secret_access_key))
    bucket: ((s3_pivnet_products_bucket))
    regexp: \[p-healthwatch,(.*)\]healthwatch-pas-exporter.*.pivotal

- name: healthwatch-pks-exporter
  type: s3
  source:
    endpoint: ((s3_endpoint))
    disable_ssl: true
    access_key_id: ((s3_access_key_id))
    secret_access_key: ((s3_secret_access_key))
    bucket: ((s3_pivnet_products_bucket))
    regexp: \[p-healthwatch,(.*)\]healthwatch-pks-exporter.*.pivotal

- name: healthwatch-stemcell
  type: s3
  source:
    endpoint: ((s3_endpoint))
    disable_ssl: true
    access_key_id: ((s3_access_key_id))
    secret_access_key: ((s3_secret_access_key))
    bucket: ((s3_pivnet_products_bucket))
    regexp: healthwatch-stemcell/\[stemcells-ubuntu-jammy,(.*)\]bosh-stemcell-.*-vsphere.*\.tgz

- name: telemetry-product
  type: s3
  source:
    endpoint: ((s3_endpoint))
    disable_ssl: true
    access_key_id: ((s3_access_key_id))
    secret_access_key: ((s3_secret_access_key))
    bucket: ((s3_pivnet_products_bucket))
    regexp: \[pivotal-telemetry-collector,(.*)\]telemetry-collector-.*.tgz

- name: platform-automation-pivnet
  type: pivnet
  source:
    api_token: ((pivnet_token))
    product_slug: platform-automation
    product_version: 5\.(.*)
    sort_by: semver

- name: platform-automation-image
  type: s3
  source:
    endpoint: ((s3_endpoint))
    disable_ssl: true
    access_key_id: ((s3_access_key_id))
    secret_access_key: ((s3_secret_access_key))
    bucket: ((s3_pivnet_products_bucket))
    regexp: platform-automation-image-(.*).tgz

- name: platform-automation-tasks
  type: git
  source:
    private_key: ((pipeline-git-repo-key.private_key))
    uri: ((pipeline-git-repo-uri))
    branch: main
    depth: 1

- name: configuration
  type: git
  source:
    private_key: ((pipeline-git-repo-key.private_key))
    uri: ((pipeline-git-repo-uri))
    branch: main
    depth: 1

# This task is used in multiple jobs
# The yaml anchor "*prepare-tasks-with-secrets" is used in its place
prepare-tasks-with-secrets: &prepare-tasks-with-secrets
  image: platform-automation-image
  file: platform-automation-tasks/tasks/prepare-tasks-with-secrets.yml
  params:
    CONFIG_PATHS: config/download-product-pivnet
  input_mapping:
    tasks: platform-automation-tasks
    config: configuration
  output_mapping:
    tasks: platform-automation-tasks

jobs:
- name: fetch-platform-automation
  plan:
  - get: platform-automation-pivnet
    trigger: true
  - in_parallel:
    - put: platform-automation-image
      params:
        file: platform-automation-pivnet/*image*.tgz

- name: fetch-opsman
  plan:
  - in_parallel:
    - get: platform-automation-image
      passed: [ fetch-platform-automation ]
      params:
        unpack: true
    - get: platform-automation-tasks
    - get: configuration
  - task: prepare-tasks-with-secrets
    <<: *prepare-tasks-with-secrets
  - task: download-opsman-image
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: download-product-pivnet/download-opsman.yml
    input_mapping:
      config: configuration
  - in_parallel:
    - put: opsman-product
      params:
        file: downloaded-product/*

- name: fetch-pks
  plan:
  - in_parallel:
    - get: platform-automation-image
      passed: [ fetch-platform-automation ]
      params:
        unpack: true
    - get: platform-automation-tasks
    - get: configuration
  - task: prepare-tasks-with-secrets
    <<: *prepare-tasks-with-secrets
  - task: download-pks-product-and-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: download-product-pivnet/download-pks.yml
    input_mapping:
      config: configuration
    output_mapping: {downloaded-stemcell: pks-stemcell}
  - in_parallel:
      - put: pks-product
        params:
          file: downloaded-product/*.pivotal
      - put: pks-stemcell
        params:
          file: pks-stemcell/*.tgz

- name: fetch-tas
  plan:
    - in_parallel:
      - get: platform-automation-image
        passed: [ fetch-platform-automation ]
        params:
          unpack: true
      - get: platform-automation-tasks
      - get: configuration
    - task: prepare-tasks-with-secrets
      <<: *prepare-tasks-with-secrets
    - task: download-tas-product-and-stemcell
      image: platform-automation-image
      file: platform-automation-tasks/tasks/download-product.yml
      params:
        CONFIG_FILE: download-product-pivnet/download-tas.yml
      input_mapping:
        config: configuration
      output_mapping: {downloaded-stemcell: tas-stemcell}
    - in_parallel:
        - put: tas-product
          params:
            file: downloaded-product/*.pivotal
        - put: tas-stemcell
          params:
            file: tas-stemcell/*.tgz

- name: fetch-isolation-segment
  plan:
    - in_parallel:
      - get: platform-automation-image
        passed: [ fetch-platform-automation ]
        params:
          unpack: true
      - get: platform-automation-tasks
      - get: configuration
    - task: prepare-tasks-with-secrets
      <<: *prepare-tasks-with-secrets
    - task: download-isolation-segment
      image: platform-automation-image
      file: platform-automation-tasks/tasks/download-product.yml
      params:
        CONFIG_FILE: download-product-pivnet/download-isolation-segment.yml
      input_mapping:
        config: configuration
    - in_parallel:
        - put: isolation-segment
          params:
            file: downloaded-product/*.pivotal

- name: fetch-ncp
  plan:
    - in_parallel:
      - get: platform-automation-image
        passed: [ fetch-platform-automation ]
        params:
          unpack: true
      - get: platform-automation-tasks
      - get: configuration
    - task: prepare-tasks-with-secrets
      <<: *prepare-tasks-with-secrets
    - task: download-ncp-product
      image: platform-automation-image
      file: platform-automation-tasks/tasks/download-product.yml
      params:
        CONFIG_FILE: download-product-pivnet/download-ncp.yml
      input_mapping:
        config: configuration
    - in_parallel:
        - put: ncp-product
          params:
            file: downloaded-product/*.pivotal

- name: fetch-healthwatch
  plan:
    - in_parallel:
      - get: platform-automation-image
        passed: [ fetch-platform-automation ]
        params:
          unpack: true
      - get: platform-automation-tasks
      - get: configuration
    - task: prepare-tasks-with-secrets
      <<: *prepare-tasks-with-secrets
    - task: download-healthwatch-product-and-stemcell
      image: platform-automation-image
      file: platform-automation-tasks/tasks/download-product.yml
      params:
        CONFIG_FILE: download-product-pivnet/download-healthwatch.yml
      input_mapping:
        config: configuration
      output_mapping: {downloaded-stemcell: healthwatch-stemcell}
    - in_parallel:
        - put: healthwatch-product
          params:
            file: downloaded-product/*healthwatch-2*.pivotal
        - put: healthwatch-stemcell
          params:
            file: healthwatch-stemcell/*.tgz

- name: fetch-healthwatch-pas-exporter
  plan:
    - in_parallel:
      - get: platform-automation-image
        passed: [ fetch-platform-automation ]
        params:
          unpack: true
      - get: platform-automation-tasks
      - get: configuration
    - task: prepare-tasks-with-secrets
      <<: *prepare-tasks-with-secrets
    - task: download-healthwatch-pas-exporter-and-stemcell
      image: platform-automation-image
      file: platform-automation-tasks/tasks/download-product.yml
      params:
        CONFIG_FILE: download-product-pivnet/download-healthwatch-pas-exporter.yml
      input_mapping:
        config: configuration
    - in_parallel:
        - put: healthwatch-pas-exporter
          params:
            file: downloaded-product/*healthwatch-pas-exporter*.pivotal

- name: fetch-healthwatch-pks-exporter
  plan:
    - in_parallel:
      - get: platform-automation-image
        passed: [ fetch-platform-automation ]
        params:
          unpack: true
      - get: platform-automation-tasks
      - get: configuration
    - task: prepare-tasks-with-secrets
      <<: *prepare-tasks-with-secrets
    - task: download-healthwatch-pks-exporter-and-stemcell
      image: platform-automation-image
      file: platform-automation-tasks/tasks/download-product.yml
      params:
        CONFIG_FILE: download-product-pivnet/download-healthwatch-pks-exporter.yml
      input_mapping:
        config: configuration
    - in_parallel:
        - put: healthwatch-pks-exporter
          params:
            file: downloaded-product/*healthwatch-pks-exporter*.pivotal

- name: fetch-telemetry-collector
  plan:
    - in_parallel:
        - get: platform-automation-image
          passed: [ fetch-platform-automation ]
          params:
            unpack: true
        - get: platform-automation-tasks
        - get: configuration
    - task: prepare-tasks-with-secrets
      <<: *prepare-tasks-with-secrets
    - task: download-telemetry-product
      image: platform-automation-image
      file: platform-automation-tasks/tasks/download-product.yml
      params:
        CONFIG_FILE: download-product-pivnet/download-telemetry.yml
      input_mapping:
        config: configuration
    - in_parallel:
        - put: telemetry-product
          params:
            file: downloaded-product/*


